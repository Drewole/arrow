/******************************************************************
Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.
******************************************************************/

/***************************************************
￼Quick list of how to use the included mixins

@include transition($transition);
@extend %clearfix;
@include font-size(14px)
@include image-2x("logo2x.png", 100px, 25px);
@include css-gradient($color1,$color2);
@include box-sizing(border-box);

//Media Queries
@include for-size(phone-only)
@include for-size(tablet-portrait-up)
@include for-size(tablet-landscape-up)
@include for-size(desktop-up)
@include for-size(big-desktop-up)

****************************************************/
/***************************************************
￼Easy to remember media query sizes
****************************************************/

@mixin for-size($size) {
	@if $size == phone-only {
		@media (max-width: 599px) {
			@content;
		} //599px originally
	} @else if $size == tablet-portrait-up {
		@media (min-width: 600px) {
			@content;
		} //600px up
	} @else if $size == tablet-landscape-up {
		@media (min-width: 900px) {
			@content;
		} //900px
	} @else if $size == desktop-up {
		@media (min-width: 1200px) {
			@content;
		} //1200px
	} @else if $size == big-desktop-up {
		@media (min-width: 1600px) {
			@content;
		} //1600px
	}
}

/*
usage
.my-box {
  padding: 10px;

  @include for-size(desktop-up) {
    padding: 20px;
  }
}
*/
/***************************************************
￼Lighten or Darken a Color Easily
****************************************************/
@function darkest( $color ) {
	@return darken($color,20%);
}
@function darker( $color ) {
	@return darken($color,13.333%);
}
@function dark( $color ) {
	@return darken($color,6.667%);
}
@function light( $color ) {
	@return lighten($color,16.667%);
}
@function lighter( $color ) {
	@return lighten($color,33.333%);
}
@function lightest( $color ) {
	@return lighten($color,50%);
}

/* Use
a {
	&:hover {
		color: darker($red);
	}
}
*/

//////////////// Adds simple white and black rgba functions
@function black($opacity) {
	@return rgba(black, $opacity);
}

@function white($opacity) {
	@return rgba(white, $opacity);
}

/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes: ("-webkit-", "");
	@each $prefix in $prefixes {
		#{$prefix}transition: $transition;
	}
}

/*********************
Clearfix
*********************/
%clearfix {
	zoom: 1;
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}
/*
Usage:
.container-with-floated-children {
  @extend %clearfix;
}
*/

/*********************
Define default font-size with REM automatically added.
*********************/
@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}
/*
Usage:
p {
  @include font-size(14px)
}
*/

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}
/*
Usage:
div.logo {
  background: url("logo.png") no-repeat;
  @include image-2x("logo2x.png", 100px, 25px);
}
*/

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*
Usage:
@include css-gradient(#dfdfdf,#f8f8f8);
*/

/*********************
BOX SIZING
*********************/

@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing: $type;
	-ms-box-sizing: $type;
	box-sizing: $type;
}

/*
Usage:
@include box-sizing(border-box);
*/

/***************************************************
￼Generate Pure CSS Arrows
****************************************************/

@mixin arrow ($direction, $size, $color) {
	@if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
}
/* -------------------Use￼------------------- */
/*&:before {
			@include arrow (right, 3px, black);
		}
*/
